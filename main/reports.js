// Initialize jsPDF
const { jsPDF } = window.jspdf;

// Global state management
let appState = {
    projectName: localStorage.getItem('projectName') || 'ClassForge Project',
    adminName: localStorage.getItem('adminName') || 'Admin User',
    allocationModel: localStorage.getItem('allocationModel') || 'KMeans+CP-SAT',
    metrics: JSON.parse(localStorage.getItem('allocationMetrics')) || {
        academicStdDev: 0,
        wellbeingSpread: 0,
        constraintViolations: [],
        runtime: 0
    }
};

// Initialize event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Export buttons
    document.getElementById('exportStudentAssignments').addEventListener('click', exportStudentAssignments);
    document.getElementById('exportClassSummary').addEventListener('click', exportClassSummary);
    document.getElementById('generatePDFReport').addEventListener('click', generatePDFReport);
    document.getElementById('exportRawData').addEventListener('click', exportRawData);
});

// Export student assignments to CSV
async function exportStudentAssignments() {
    try {
        const students = JSON.parse(localStorage.getItem('studentAssignments')) || [];
        if (!students.length) {
            showError('No student assignment data available');
            return;
        }

        const headers = ['Student ID', 'Assigned Class', 'Academic Score', 'Wellbeing Score', 'Bullying Score'];
        const csvContent = generateCSV(students, headers);
        downloadFile(csvContent, 'student-assignments.csv', 'text/csv');
        showSuccess('Student assignments exported successfully');
    } catch (error) {
        showError('Failed to export student assignments');
        console.error(error);
    }
}

// Export class summary to CSV
async function exportClassSummary() {
    try {
        const classes = JSON.parse(localStorage.getItem('classSummary')) || [];
        if (!classes.length) {
            showError('No class summary data available');
            return;
        }

        const headers = ['Class ID', 'Student Count', 'Avg Academic Score', 'Avg Wellbeing', 'Bullying Count'];
        const csvContent = generateCSV(classes, headers);
        downloadFile(csvContent, 'class-summary.csv', 'text/csv');
        showSuccess('Class summary exported successfully');
    } catch (error) {
        showError('Failed to export class summary');
        console.error(error);
    }
}

// Generate PDF report
async function generatePDFReport() {
    try {
        const doc = new jsPDF();
        let yOffset = 20;

        // Title
        doc.setFontSize(20);
        doc.text('ClassForge Allocation Report', 20, yOffset);
        yOffset += 15;

        // Project and Admin Info
        doc.setFontSize(12);
        doc.text(`Project: ${appState.projectName}`, 20, yOffset);
        yOffset += 10;
        doc.text(`Generated by: ${appState.adminName}`, 20, yOffset);
        yOffset += 10;
        doc.text(`Allocation Model: ${appState.allocationModel}`, 20, yOffset);
        yOffset += 20;

        // Summary Metrics
        doc.setFontSize(14);
        doc.text('Summary Metrics', 20, yOffset);
        yOffset += 10;
        doc.setFontSize(12);
        doc.text(`Academic Std Deviation: ${appState.metrics.academicStdDev.toFixed(2)}`, 20, yOffset);
        yOffset += 10;
        doc.text(`Wellbeing Spread: ${appState.metrics.wellbeingSpread.toFixed(2)}`, 20, yOffset);
        yOffset += 10;
        doc.text(`Runtime: ${appState.metrics.runtime.toFixed(2)}s`, 20, yOffset);
        yOffset += 20;

        // Constraint Violations
        if (appState.metrics.constraintViolations.length) {
            doc.setFontSize(14);
            doc.text('Constraint Violations', 20, yOffset);
            yOffset += 10;
            doc.setFontSize(12);
            appState.metrics.constraintViolations.forEach(violation => {
                doc.text(`â€¢ ${violation}`, 20, yOffset);
                yOffset += 10;
            });
        }

        // Add charts (placeholder - actual implementation would use Chart.js)
        yOffset += 20;
        doc.text('Performance Visualizations available in the dashboard', 20, yOffset);

        // Save the PDF
        doc.save('allocation-report.pdf');
        showSuccess('PDF report generated successfully');
    } catch (error) {
        showError('Failed to generate PDF report');
        console.error(error);
    }
}

// Export raw dataset
async function exportRawData() {
    try {
        const rawData = JSON.parse(localStorage.getItem('rawDataset')) || [];
        if (!rawData.length) {
            showError('No raw dataset available');
            return;
        }

        const headers = Object.keys(rawData[0]);
        const csvContent = generateCSV(rawData, headers);
        downloadFile(csvContent, 'raw-dataset.csv', 'text/csv');
        showSuccess('Raw dataset exported successfully');
    } catch (error) {
        showError('Failed to export raw dataset');
        console.error(error);
    }
}

// Helper function to generate CSV content
function generateCSV(data, headers) {
    const csvRows = [];
    csvRows.push(headers.join(','));

    for (const row of data) {
        const values = headers.map(header => {
            const value = row[header];
            return `"${value}"`;
        });
        csvRows.push(values.join(','));
    }

    return csvRows.join('\n');
}

// Helper function to download file
function downloadFile(content, fileName, contentType) {
    const blob = new Blob([content], { type: contentType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
}

// Notification functions
function showSuccess(message) {
    alert('Success: ' + message); // Replace with your preferred notification system
}

function showError(message) {
    alert('Error: ' + message); // Replace with your preferred notification system
} 